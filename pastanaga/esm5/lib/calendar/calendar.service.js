import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { addMonths, addYears, eachDayOfInterval, eachMonthOfInterval, eachYearOfInterval, endOfMonth, endOfWeek, endOfYear, format, isBefore, isFuture, isSameDay, isSameMonth, isSameYear, isSaturday, isSunday, isWithinInterval, startOfMonth, startOfWeek, startOfYear, subMonths, subYears } from 'date-fns';
import { CalendarDate, CalendarView } from './calendar.model';
import * as i0 from "@angular/core";
var CalendarService = /** @class */ (function () {
    function CalendarService() {
    }
    CalendarService.prototype.getNextMonth = function (date, selectedRange, min) {
        var nextDate = addMonths(date, 1);
        return this.getMonth(nextDate, selectedRange, min);
    };
    CalendarService.prototype.getPreviousMonth = function (date, selectedRange, min) {
        var previousDate = subMonths(date, 1);
        return this.getMonth(previousDate, selectedRange, min);
    };
    CalendarService.prototype.getMonth = function (date, selectedRange, min) {
        var start = startOfMonth(date);
        var end = endOfMonth(date);
        var dateRef = start;
        if (!isSunday(start)) {
            start = startOfWeek(start);
        }
        if (!isSaturday(end)) {
            end = endOfWeek(end);
        }
        return {
            dateRef: dateRef,
            dates: eachDayOfInterval({ start: start, end: end }).map(function (d) { return new CalendarDate({
                date: d,
                label: "" + d.getDate(),
                isFuture: isFuture(d),
                firstOfInterval: !!selectedRange.start && isSameDay(d, selectedRange.start),
                lastOfInterval: !!selectedRange.end && isSameDay(d, selectedRange.end),
                inInterval: !!selectedRange.start && !!selectedRange.end
                    && isWithinInterval(d, { start: selectedRange.start, end: selectedRange.end }),
                isActive: (!!selectedRange.start && isSameDay(d, selectedRange.start))
                    || (!!selectedRange.end && isSameDay(d, selectedRange.end)),
                isDisabled: !!min && isBefore(d, min),
            }); }),
            headerButtons: [
                { label: format(date, 'MMMM'), view: CalendarView.month },
                { label: format(date, 'yyyy'), view: CalendarView.year },
            ],
        };
    };
    CalendarService.prototype.getPreviousMonths = function (date, currentDate, min) {
        var previousDate = subYears(date, 1);
        return this.getMonths(previousDate, currentDate, min);
    };
    CalendarService.prototype.getNextMonths = function (date, currentDate, min) {
        var nextDate = addYears(date, 1);
        return this.getMonths(nextDate, currentDate, min);
    };
    CalendarService.prototype.getMonths = function (date, currentDate, min) {
        var start = startOfYear(date);
        var end = endOfYear(date);
        return {
            dateRef: start,
            dates: eachMonthOfInterval({ start: start, end: end }).map(function (d) { return new CalendarDate({
                date: d,
                label: format(d, 'MMMM'),
                isFuture: isFuture(d),
                isActive: isSameMonth(d, currentDate),
                isDisabled: !!min && !isSameMonth(d, min) && isBefore(d, min),
            }); }),
            headerButtons: [{ label: format(date, 'yyyy'), view: CalendarView.year }],
        };
    };
    CalendarService.prototype.getPreviousYears = function (date, currentDate, min) {
        var previousDate = subYears(date, 20);
        return this.getYears(previousDate, currentDate, min);
    };
    CalendarService.prototype.getNextYears = function (date, currentDate, min) {
        var nextDate = addYears(date, 20);
        return this.getYears(nextDate, currentDate, min);
    };
    CalendarService.prototype.getYears = function (date, currentDate, min) {
        var start = subYears(date, 10);
        var end = addYears(date, 9);
        return {
            dateRef: date,
            dates: eachYearOfInterval({ start: start, end: end }).map(function (d) { return new CalendarDate({
                date: d,
                label: "" + d.getFullYear(),
                isFuture: isFuture(d),
                isActive: isSameYear(d, currentDate),
                isDisabled: !!min && !isSameYear(d, min) && isBefore(d, min),
            }); }),
            headerButtons: [{ label: start.getFullYear() + " - " + end.getFullYear(), view: CalendarView.day }],
        };
    };
    CalendarService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CalendarService_Factory() { return new CalendarService(); }, token: CalendarService, providedIn: "root" });
    CalendarService = __decorate([
        Injectable({ providedIn: 'root' }),
        __metadata("design:paramtypes", [])
    ], CalendarService);
    return CalendarService;
}());
export { CalendarService };
//# sourceMappingURL=data:application/json;base64,