export var IconSize;
(function (IconSize) {
    IconSize["SMALL"] = "SMALL";
    IconSize["MEDIUM"] = "MEDIUM";
    IconSize["LARGE"] = "LARGE";
})(IconSize || (IconSize = {}));
var Icon = /** @class */ (function () {
    function Icon(data) {
        this.name = data.name || '';
        this.path = data.path || '';
        this.backgroundColor = data.backgroundColor || '';
        this.fillColor = data.fillColor || '';
        this.padding = data.padding || '';
        this.size = data.size || IconSize.MEDIUM;
    }
    return Icon;
}());
export { Icon };
var PositionStyle = /** @class */ (function () {
    function PositionStyle() {
    }
    return PositionStyle;
}());
export { PositionStyle };
export var getFixedRootParent = function (element) {
    if (element.tagName === 'BODY') {
        return element;
    }
    // an element with `position: fixed` will be positionned relatively to the viewport
    // unless one of the ancestor has a property `transform`, `filter` or `perspective`
    // and its position is not static
    var style = getComputedStyle(element);
    if (style.position !== 'static' && (style.transform !== 'none' || style.perspective !== 'none' || style.filter !== 'none')) {
        return element;
    }
    else {
        var parent_1 = element.parentElement;
        return parent_1 ? getFixedRootParent(parent_1) : element;
    }
};
export var getPositionnedParent = function (element) {
    if (element.tagName === 'BODY') {
        return element;
    }
    var style = getComputedStyle(element);
    if (style.position !== 'static') {
        return element;
    }
    else {
        var parent_2 = element.parentElement;
        return parent_2 ? getPositionnedParent(parent_2) : element;
    }
};
export var getRealPosition = function (element) {
    var tmp = element;
    var tagName = tmp.tagName.toLowerCase();
    var top = 0;
    var left = 0;
    while (!!tmp && tagName !== 'body') {
        top += tmp.offsetTop;
        left += tmp.offsetLeft;
        tmp = tmp.offsetParent;
        tagName = tmp.tagName.toLowerCase();
    }
    return { top: top, left: left };
};
export var getVirtualScrollParentPosition = function (element) {
    var tmp = element;
    while (!!tmp && tmp.tagName.toLowerCase() !== 'body' && tmp.tagName.toLowerCase() !== 'cdk-virtual-scroll-viewport') {
        tmp = tmp.offsetParent;
    }
    if (!!tmp && tmp.tagName.toLowerCase() === 'cdk-virtual-scroll-viewport') {
        var pos = getRealPosition(tmp);
        return {
            bottom: pos.top + tmp.clientHeight,
            right: pos.left + tmp.clientWidth,
        };
    }
    else {
        return null;
    }
};
export var markForCheck = function (cdr) {
    if (!cdr.destroyed) {
        cdr.markForCheck();
    }
};
export var detectChanges = function (cdr) {
    if (!cdr.destroyed) {
        cdr.detectChanges();
    }
};
//# sourceMappingURL=data:application/json;base64,