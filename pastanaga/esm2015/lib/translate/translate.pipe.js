import { __decorate, __metadata, __param } from "tslib";
import { Pipe, Inject } from '@angular/core';
let TranslatePipe = class TranslatePipe {
    constructor(lang, translations) {
        this.lang = lang;
        this.translations = translations;
        this.value = '';
    }
    transform(key, args) {
        if (!key) {
            return '';
        }
        // if we ask another time for the same key, return the last value
        if (key === this.lastKey && args === this.lastParams) {
            return this.value;
        }
        const keys = !!key ? key.split('.') : [];
        this.value = this.lang === 'en_US' ? this.getValue(keys, 'en_US', this.translations) :
            (this.getValue(keys, this.lang, this.translations) || this.getValue(keys, 'en_US', this.translations));
        if (!!this.value && !!args) {
            this.lastParams = args;
            let value = this.value;
            Object.keys(args).forEach(param => {
                value = value.replace(new RegExp(`{{${param}}}`, 'g'), args[param]);
            });
            this.value = value;
        }
        return (!!this.value || this.value === '') ? this.value : key;
    }
    getValue(keys, lang, translations) {
        const translateKeys = translations[lang] || {};
        let value = !!translateKeys['default'] ? translateKeys['default'] : translateKeys;
        keys.forEach(k => {
            if (!!value) {
                value = value[k];
            }
        });
        return !value || typeof value === 'string' ? value : keys.join('.');
    }
};
TranslatePipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: ['LANG',] }] },
    { type: undefined, decorators: [{ type: Inject, args: ['TRANSLATIONS',] }] }
];
TranslatePipe = __decorate([
    Pipe({
        name: 'translate',
        pure: true,
    }),
    __param(0, Inject('LANG')),
    __param(1, Inject('TRANSLATIONS')),
    __metadata("design:paramtypes", [Object, Object])
], TranslatePipe);
export { TranslatePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3VpbGxvdGluYXdlYi9wYXN0YW5hZ2EtYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi90cmFuc2xhdGUvdHJhbnNsYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUs1RCxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0lBS3RCLFlBQzRCLElBQVMsRUFDRCxZQUFpQjtRQUR6QixTQUFJLEdBQUosSUFBSSxDQUFLO1FBQ0QsaUJBQVksR0FBWixZQUFZLENBQUs7UUFKckQsVUFBSyxHQUF1QixFQUFFLENBQUM7SUFLNUIsQ0FBQztJQUVKLFNBQVMsQ0FBQyxHQUFZLEVBQUUsSUFBVTtRQUM5QixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sT0FBTyxFQUFFLENBQUM7U0FDYjtRQUNELGlFQUFpRTtRQUNqRSxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2xELE9BQU8sSUFBSSxDQUFDLEtBQWUsQ0FBQztTQUMvQjtRQUNELE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDbEYsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDM0csSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDeEUsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUN0QjtRQUVELE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDbEUsQ0FBQztJQUVPLFFBQVEsQ0FBQyxJQUFjLEVBQUUsSUFBWSxFQUFFLFlBQWlCO1FBQzVELE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0MsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDbEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNiLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFDVCxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3BCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Q0FFSixDQUFBOzs0Q0F0Q1EsTUFBTSxTQUFDLE1BQU07NENBQ2IsTUFBTSxTQUFDLGNBQWM7O0FBUGpCLGFBQWE7SUFKekIsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLFdBQVc7UUFDakIsSUFBSSxFQUFFLElBQUk7S0FDWCxDQUFDO0lBT08sV0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDZCxXQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTs7R0FQbEIsYUFBYSxDQTRDekI7U0E1Q1ksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuQFBpcGUoe1xuICBuYW1lOiAndHJhbnNsYXRlJyxcbiAgcHVyZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGxhc3RLZXk/OiBzdHJpbmc7XG4gICAgbGFzdFBhcmFtcz86IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gJyc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdCgnTEFORycpIHByaXZhdGUgbGFuZzogYW55LFxuICAgICAgICBASW5qZWN0KCdUUkFOU0xBVElPTlMnKSBwcml2YXRlIHRyYW5zbGF0aW9uczogYW55LFxuICAgICkge31cblxuICAgIHRyYW5zZm9ybShrZXk/OiBzdHJpbmcsIGFyZ3M/OiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHdlIGFzayBhbm90aGVyIHRpbWUgZm9yIHRoZSBzYW1lIGtleSwgcmV0dXJuIHRoZSBsYXN0IHZhbHVlXG4gICAgICAgIGlmIChrZXkgPT09IHRoaXMubGFzdEtleSAmJiBhcmdzID09PSB0aGlzLmxhc3RQYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlIGFzIHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlzID0gISFrZXkgPyBrZXkuc3BsaXQoJy4nKSA6IFtdO1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5sYW5nID09PSAnZW5fVVMnID8gdGhpcy5nZXRWYWx1ZShrZXlzLCAnZW5fVVMnLCB0aGlzLnRyYW5zbGF0aW9ucykgOlxuICAgICAgICAgICAgKHRoaXMuZ2V0VmFsdWUoa2V5cywgdGhpcy5sYW5nLCB0aGlzLnRyYW5zbGF0aW9ucykgfHwgdGhpcy5nZXRWYWx1ZShrZXlzLCAnZW5fVVMnLCB0aGlzLnRyYW5zbGF0aW9ucykpO1xuICAgICAgICBpZiAoISF0aGlzLnZhbHVlICYmICEhYXJncykge1xuICAgICAgICAgICAgdGhpcy5sYXN0UGFyYW1zID0gYXJncztcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKHBhcmFtID0+IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChge3ske3BhcmFtfX19YCwgJ2cnKSwgYXJnc1twYXJhbV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCEhdGhpcy52YWx1ZSB8fCB0aGlzLnZhbHVlID09PSAnJykgPyB0aGlzLnZhbHVlIDoga2V5O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VmFsdWUoa2V5czogc3RyaW5nW10sIGxhbmc6IHN0cmluZywgdHJhbnNsYXRpb25zOiBhbnkpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVLZXlzID0gdHJhbnNsYXRpb25zW2xhbmddIHx8IHt9O1xuICAgICAgICBsZXQgdmFsdWUgPSAhIXRyYW5zbGF0ZUtleXNbJ2RlZmF1bHQnXSA/IHRyYW5zbGF0ZUtleXNbJ2RlZmF1bHQnXSA6IHRyYW5zbGF0ZUtleXM7XG4gICAgICAgIGtleXMuZm9yRWFjaChrID0+IHtcbiAgICAgICAgICAgIGlmICghIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVtrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAhdmFsdWUgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDoga2V5cy5qb2luKCcuJyk7XG4gICAgfVxuXG59XG4iXX0=