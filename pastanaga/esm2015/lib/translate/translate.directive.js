import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, AfterViewChecked } from '@angular/core';
import { TranslatePipe } from './translate.pipe';
let TranslateDirective = class TranslateDirective {
    constructor(eltRef, translatePipe) {
        this.eltRef = eltRef;
        this.translatePipe = translatePipe;
        this.key = '';
    }
    set translate(key) {
        if (key) {
            this.key = key;
            this.checkNodes();
        }
    }
    set translateParams(params) {
        if (!this.areEquals(this.currentParams, params)) {
            this.currentParams = params;
            this.checkNodes(true);
        }
    }
    ngAfterViewChecked() {
        this.checkNodes();
    }
    checkNodes(forceUpdate = false) {
        let nodes = this.eltRef.nativeElement.childNodes;
        // if the element is empty
        if (!nodes.length) {
            // we add the key as content
            this.setContent(this.eltRef.nativeElement, this.key);
            nodes = this.eltRef.nativeElement.childNodes;
        }
        for (let i = 0; i < nodes.length; ++i) {
            const node = nodes[i];
            if (node.nodeType === 3) { // node type 3 is a text node
                let key = '';
                if (this.key) {
                    key = this.key;
                    if (forceUpdate) {
                        node.lastKey = null;
                    }
                }
                else {
                    const content = this.getContent(node);
                    const trimmedContent = content.trim();
                    if (trimmedContent.length) {
                        if (content !== node.currentValue) {
                            key = trimmedContent;
                            node.originalContent = this.getContent(node);
                        }
                        else if (node.originalContent && forceUpdate) {
                            node.lastKey = null;
                            key = node.originalContent.trim();
                        }
                    }
                }
                this.updateValue(key, node);
            }
        }
    }
    updateValue(key, node) {
        if (key) {
            if (node.lastKey === key && !!this.lastParams && this.areEquals(this.lastParams, this.currentParams)) {
                return;
            }
            this.lastParams = this.currentParams;
            const translate = this.translatePipe.transform(key, this.currentParams);
            if (translate !== key) {
                node.lastKey = key;
            }
            if (!node.originalContent) {
                node.originalContent = this.getContent(node);
            }
            node.currentValue = !!translate ? translate : (node.originalContent || key);
            // we replace in the original content to preserve spaces that we might have trimmed
            this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));
        }
    }
    getContent(node) {
        return !!node.textContent ? node.textContent : node.data;
    }
    setContent(node, content) {
        if (!!node.textContent) {
            node.textContent = content;
        }
        else {
            node.data = content;
        }
    }
    areEquals(obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    }
};
TranslateDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: TranslatePipe }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], TranslateDirective.prototype, "translate", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TranslateDirective.prototype, "translateParams", null);
TranslateDirective = __decorate([
    Directive({
        selector: '[translate]'
    }),
    __metadata("design:paramtypes", [ElementRef,
        TranslatePipe])
], TranslateDirective);
export { TranslateDirective };
//# sourceMappingURL=data:application/json;base64,