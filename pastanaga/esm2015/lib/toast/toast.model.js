import { BehaviorSubject } from 'rxjs';
export class ToastModel {
    constructor(data) {
        // Avoids error when input is null
        data = data ? data : {};
        this.key = data.key;
        this.message = data.message;
        this.delay = typeof data.delay === 'number' ? data.delay : 5000; // dismiss after 5s by default
        this.icon = data.icon;
        this.buttons = data.buttons || [];
        this.closeable = data.closeable;
        this.translateParams = data.translateParams;
        this.style = data.style;
        this.componentFactory = data.componentFactory;
        this.componentData = data.componentData;
        if (this.buttons.length > 0) {
            this.onClick = new BehaviorSubject('');
        }
    }
}
export class ToastButtonModel {
    constructor(data) {
        // Avoids error when input is null
        data = data ? data : {};
        this.id = data.id || data.text || data.icon;
        this.text = data.text;
        this.color = data.color || ToastButtonModel.PRIMARY;
        this.icon = data.icon;
        this.tooltip = data.tooltip;
    }
}
ToastButtonModel.PRIMARY = 'primary';
ToastButtonModel.SECONDARY = 'secondary';
ToastButtonModel.DESTRUCTIVE = 'destructive';
export const getToastCloseButton = () => {
    return new ToastButtonModel({ icon: 'clear', color: 'secondary', tooltip: 'common.close', text: 'common.close' });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3VpbGxvdGluYXdlYi9wYXN0YW5hZ2EtYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi90b2FzdC90b2FzdC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSXZDLE1BQU0sT0FBTyxVQUFVO0lBbUNuQixZQUFZLElBQVM7UUFDakIsa0NBQWtDO1FBQ2xDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUVwQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyw4QkFBOEI7UUFDL0YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXRCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUM1QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUM5QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMxQztJQUNMLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxnQkFBZ0I7SUFZekIsWUFBWSxJQUFTO1FBQ2pCLGtDQUFrQztRQUNsQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDO1FBQ3BELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDaEMsQ0FBQzs7QUFuQnNCLHdCQUFPLEdBQUcsU0FBUyxDQUFDO0FBQ3BCLDBCQUFTLEdBQUcsV0FBVyxDQUFDO0FBQ3hCLDRCQUFXLEdBQUcsYUFBYSxDQUFDO0FBb0J2RCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxHQUFxQixFQUFFO0lBQ3RELE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQ3RILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVG9hc3RDb21wb25lbnQgfSBmcm9tICcuL3RvYXN0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjbGFzcyBUb2FzdE1vZGVsIHtcbiAgICBvbkNsaWNrPzogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz47XG5cbiAgICAvLyBJbnRlcm5hbCB0b2FzdCBpZGVudGlmaWVyLlxuICAgIGtleTogc3RyaW5nO1xuXG4gICAgLy8gTWVzc2FnZSB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHRvYXN0LlxuICAgIC8vIFRvIGRpc3BsYXkgYSBsaW5rIHdpdGhpbiBpbiBhIHRvYXN0IG1lc3NhZ2UsIHRoZXkgbXVzdCBiZSBwYXJzZWQgYXM6IFt0ZXh0X3RvX2JlX2Rpc3BsYXllZHxhbmNob3JfdXJsXVxuICAgIC8vXG4gICAgLy8gJ1RoaXMgaXMgYSBHb29nbGUgW2xpbmt8d3d3dy5nb29nbGUuZXNdJyAtPiBUaGlzIGlzIGEgR29vZ2xlIGxpbmsgKHdoZXJlIFwibGlua1wiIGluIGFuIGFuY2hvciB0byBcInd3dy5nb29nbGUuZXNcIilcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgICAvLyBwYXJhbXMgdG8gYmUgdXNlZCBieSB0cmFuc2xhdGUgcGlwZVxuICAgIHRyYW5zbGF0ZVBhcmFtcyA/OiBhbnk7XG5cbiAgICAvLyBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgdGhlIHRvYXN0IHdpbGwgYmUgdmlzaWJsZSBiZWZvcmUgYmVpbmcgZGlzbWlzc2VkIGF1dG9tYXRpY2FsbHkuXG4gICAgLy8gSWYgZGVsYXkgaXMgc2V0IHRvIFpFUk8gKDApLCB0aGUgdG9hc3Qgd29uJ3QgYmUgZGlzbWlzc2libGUgdW50aWwgdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggaXQuXG4gICAgZGVsYXk/OiBudW1iZXI7XG5cbiAgICAvLyBMaXN0IG9mIGJ1dHRvbnMgdG8gYmUgZGlzcGxheWVkLlxuICAgIGJ1dHRvbnM6IFRvYXN0QnV0dG9uTW9kZWxbXTtcblxuICAgIC8vIElmIHRydWUgKGFuZCBubyBidXR0b25zIGRlZmluZWQpLCB0aGUgdG9hc3Qgd2lsbCBkaXNwbGF5IGEgY2xvc2UgYnV0dG9uICh3aXRoIGFuIGljb24pLlxuICAgIC8vIElmIGEgdG9hc3QgaGFzIGJ1dHRvbnMgdGhpcyBwcm9wZXJ0eSB3aWxsIGJlIGlnbm9yZWQuXG4gICAgY2xvc2VhYmxlPzogYm9vbGVhbjtcblxuICAgIC8vIFRvb2x0aXAgbGVhZGluZyBpY29uLlxuICAgIGljb246IHN0cmluZztcblxuICAgIC8vIGNsYXNzIHRvIGJlIHVzZWQgZm9yIHRvYXN0IHN0eWxlXG4gICAgc3R5bGU6IHN0cmluZztcblxuICAgIGNvbXBvbmVudEZhY3Rvcnk/OiBDb21wb25lbnRGYWN0b3J5PFRvYXN0Q29tcG9uZW50PjtcbiAgICBjb21wb25lbnREYXRhPzogYW55O1xuXG4gICAgY29uc3RydWN0b3IoZGF0YTogYW55KSB7XG4gICAgICAgIC8vIEF2b2lkcyBlcnJvciB3aGVuIGlucHV0IGlzIG51bGxcbiAgICAgICAgZGF0YSA9IGRhdGEgPyBkYXRhIDoge307XG5cbiAgICAgICAgdGhpcy5rZXkgPSBkYXRhLmtleTtcblxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2U7XG4gICAgICAgIHRoaXMuZGVsYXkgPSB0eXBlb2YgZGF0YS5kZWxheSA9PT0gJ251bWJlcicgPyBkYXRhLmRlbGF5IDogNTAwMDsgLy8gZGlzbWlzcyBhZnRlciA1cyBieSBkZWZhdWx0XG4gICAgICAgIHRoaXMuaWNvbiA9IGRhdGEuaWNvbjtcblxuICAgICAgICB0aGlzLmJ1dHRvbnMgPSBkYXRhLmJ1dHRvbnMgfHwgW107XG4gICAgICAgIHRoaXMuY2xvc2VhYmxlID0gZGF0YS5jbG9zZWFibGU7XG4gICAgICAgIHRoaXMudHJhbnNsYXRlUGFyYW1zID0gZGF0YS50cmFuc2xhdGVQYXJhbXM7XG4gICAgICAgIHRoaXMuc3R5bGUgPSBkYXRhLnN0eWxlO1xuICAgICAgICB0aGlzLmNvbXBvbmVudEZhY3RvcnkgPSBkYXRhLmNvbXBvbmVudEZhY3Rvcnk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50RGF0YSA9IGRhdGEuY29tcG9uZW50RGF0YTtcblxuICAgICAgICBpZiAodGhpcy5idXR0b25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMub25DbGljayA9IG5ldyBCZWhhdmlvclN1YmplY3QoJycpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVG9hc3RCdXR0b25Nb2RlbCB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBSSU1BUlkgPSAncHJpbWFyeSc7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBTRUNPTkRBUlkgPSAnc2Vjb25kYXJ5JztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERFU1RSVUNUSVZFID0gJ2Rlc3RydWN0aXZlJztcblxuICAgIGlkOiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgaWNvbjogc3RyaW5nO1xuICAgIHRvb2x0aXA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSkge1xuICAgICAgICAvLyBBdm9pZHMgZXJyb3Igd2hlbiBpbnB1dCBpcyBudWxsXG4gICAgICAgIGRhdGEgPSBkYXRhID8gZGF0YSA6IHt9O1xuXG4gICAgICAgIHRoaXMuaWQgPSBkYXRhLmlkIHx8IGRhdGEudGV4dCB8fCBkYXRhLmljb247XG4gICAgICAgIHRoaXMudGV4dCA9IGRhdGEudGV4dDtcbiAgICAgICAgdGhpcy5jb2xvciA9IGRhdGEuY29sb3IgfHwgVG9hc3RCdXR0b25Nb2RlbC5QUklNQVJZO1xuICAgICAgICB0aGlzLmljb24gPSBkYXRhLmljb247XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IGRhdGEudG9vbHRpcDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRUb2FzdENsb3NlQnV0dG9uID0gKCk6IFRvYXN0QnV0dG9uTW9kZWwgPT4ge1xuICAgIHJldHVybiBuZXcgVG9hc3RCdXR0b25Nb2RlbCh7IGljb246ICdjbGVhcicsIGNvbG9yOiAnc2Vjb25kYXJ5JywgdG9vbHRpcDogJ2NvbW1vbi5jbG9zZScsIHRleHQ6ICdjb21tb24uY2xvc2UnIH0pO1xufTtcbiJdfQ==