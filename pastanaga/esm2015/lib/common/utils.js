export var IconSize;
(function (IconSize) {
    IconSize["SMALL"] = "SMALL";
    IconSize["MEDIUM"] = "MEDIUM";
    IconSize["LARGE"] = "LARGE";
})(IconSize || (IconSize = {}));
export class Icon {
    constructor(data) {
        this.name = data.name || '';
        this.path = data.path || '';
        this.backgroundColor = data.backgroundColor || '';
        this.fillColor = data.fillColor || '';
        this.padding = data.padding || '';
        this.size = data.size || IconSize.MEDIUM;
    }
}
export class PositionStyle {
}
export const getFixedRootParent = (element) => {
    if (element.tagName === 'BODY') {
        return element;
    }
    // an element with `position: fixed` will be positionned relatively to the viewport
    // unless one of the ancestor has a property `transform`, `filter` or `perspective`
    // and its position is not static
    const style = getComputedStyle(element);
    if (style.position !== 'static' && (style.transform !== 'none' || style.perspective !== 'none' || style.filter !== 'none')) {
        return element;
    }
    else {
        const parent = element.parentElement;
        return parent ? getFixedRootParent(parent) : element;
    }
};
export const getPositionnedParent = (element) => {
    if (element.tagName === 'BODY') {
        return element;
    }
    const style = getComputedStyle(element);
    if (style.position !== 'static') {
        return element;
    }
    else {
        const parent = element.parentElement;
        return parent ? getPositionnedParent(parent) : element;
    }
};
export const getRealPosition = (element) => {
    let tmp = element;
    let tagName = tmp.tagName.toLowerCase();
    let top = 0;
    let left = 0;
    while (!!tmp && tagName !== 'body') {
        top += tmp.offsetTop;
        left += tmp.offsetLeft;
        tmp = tmp.offsetParent;
        tagName = tmp.tagName.toLowerCase();
    }
    return { top, left };
};
export const getVirtualScrollParentPosition = (element) => {
    let tmp = element;
    while (!!tmp && tmp.tagName.toLowerCase() !== 'body' && tmp.tagName.toLowerCase() !== 'cdk-virtual-scroll-viewport') {
        tmp = tmp.offsetParent;
    }
    if (!!tmp && tmp.tagName.toLowerCase() === 'cdk-virtual-scroll-viewport') {
        const pos = getRealPosition(tmp);
        return {
            bottom: pos.top + tmp.clientHeight,
            right: pos.left + tmp.clientWidth,
        };
    }
    else {
        return null;
    }
};
export const markForCheck = (cdr) => {
    if (!cdr.destroyed) {
        cdr.markForCheck();
    }
};
export const detectChanges = (cdr) => {
    if (!cdr.destroyed) {
        cdr.detectChanges();
    }
};
//# sourceMappingURL=data:application/json;base64,