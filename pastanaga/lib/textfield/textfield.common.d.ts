import { ControlValueAccessor, FormControl, Validator } from '@angular/forms';
import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
export interface InputErrors {
    required: boolean;
    pattern: boolean;
    passwordStrength?: boolean;
    min?: boolean;
    max?: boolean;
}
export declare class TextfieldCommon implements ControlValueAccessor, OnInit, OnDestroy, Validator {
    id?: string;
    name?: string;
    value?: string | number;
    errorHelp?: string;
    errorMessage?: string;
    placeholder?: string;
    help?: string;
    pattern?: RegExp;
    min?: number;
    max?: number;
    get required(): boolean;
    set required(value: boolean);
    get disabled(): boolean;
    set disabled(value: boolean);
    get isReadOnly(): boolean;
    set isReadOnly(value: boolean);
    get isLabelHidden(): boolean;
    set isLabelHidden(value: boolean);
    get isPlaceholderShown(): boolean;
    set isPlaceholderShown(value: boolean);
    get isLessen(): boolean;
    set isLessen(value: boolean);
    get accent(): boolean;
    set accent(value: boolean);
    debounceDuration: number;
    valueChange: EventEmitter<any>;
    instantValueChange: EventEmitter<any>;
    keyUp: EventEmitter<any>;
    keyPress: EventEmitter<any>;
    enter: EventEmitter<{
        event: KeyboardEvent;
        value: string;
    }>;
    blur: EventEmitter<any>;
    focus: EventEmitter<any>;
    _required: boolean;
    _disabled: boolean;
    _readOnly: boolean;
    _labelHidden: boolean;
    _placeholderShown: boolean;
    _isLessen: boolean;
    _accent: boolean;
    helpId: string;
    onChange?: Function;
    onTouched?: Function;
    hasError: boolean;
    errors: InputErrors;
    baseId: string;
    type: string;
    debouncer: Subject<string>;
    terminator: Subject<void>;
    constructor();
    ngOnInit(): void;
    ngOnDestroy(): void;
    change(value: any): void;
    onKeyUp($event: any): void;
    onBlur(): void;
    _validate(value: any): void;
    validate(control: FormControl): any;
    writeValue(value: any): void;
    registerOnTouched(handler: any): void;
    registerOnChange(handler: any): void;
    setDisabledState(disabled: boolean): void;
}
